name: App Build & Deploy (AKS)

on:
  pull_request:
    branches: [ main ]
    paths:
      - "app/**"
      - ".github/workflows/app-build-and-deploy.yml"
  push:
    branches: [ main ]
    paths:
      - "app/**"
      - ".github/workflows/app-build-and-deploy.yml"

permissions:
  id-token: write
  contents: read
  packages: write

env:
  ACR_NAME: ${{ vars.ACR_NAME }}
  ACR_LOGIN_SERVER: ${{ vars.ACR_LOGIN_SERVER }}
  IMAGE_NAME: remix-weather
  DOCKERFILE_PATH: app/Dockerfile
  BUILD_CONTEXT: app
  SHA_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build & Push Image
    # Build on PRs (for test) and on push to main (for prod)
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    runs-on: ubuntu-latest

    # <<< IMPORTANT: expose the full image ref as a job output
    outputs:
      image: ${{ steps.meta.outputs.image }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure OIDC Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Azure ACR Login
        run: az acr login --name "${{ vars.ACR_NAME }}"
      
      - name: Debug build context
        run: |
          echo "DOCKERFILE_PATH='${{ env.DOCKERFILE_PATH }}'"
          echo "BUILD_CONTEXT='${{ env.BUILD_CONTEXT }}'"
          ls -la
          ls -la app || true

      - name: Build & Push image (tag = commit SHA)
        run: |
          test -f Dockerfile || { echo "No Dockerfile in repo root"; exit 1; }
          docker build -f Dockerfile -t "${{ vars.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.SHA_TAG }}" .
          docker push "${{ vars.ACR_LOGIN_SERVER }}/${{ env.IMAGE_NAME }}:${{ env.SHA_TAG }}"

      - name: Expose image tag as output
        id: meta
        run: echo "image=$ACR_LOGIN_SERVER/$IMAGE_NAME:$SHA_TAG" >> $GITHUB_OUTPUT

  deploy-test:
    name: Deploy to AKS Test (PR only)
    if: github.event_name == 'pull_request'
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      AKS_CLUSTER: ${{ vars.AKS_TEST_NAME }}
      AKS_RG: ${{ vars.RESOURCE_GROUP }}
      IMAGE: ${{ needs.build-and-push.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure OIDC Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install kubelogin
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: latest

      - name: AKS set-context (test)
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ vars.RESOURCE_GROUP }}
          cluster-name:  ${{ vars.AKS_TEST_NAME }}
          use-kubelogin: true

      - name: Create namespace if missing
        run: |
          kubectl create namespace weather --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes manifests (test)
        run: |
          sed "s|IMAGE_PLACEHOLDER|${IMAGE}|g" deployment.yaml | kubectl -n weather apply -f -
          kubectl -n weather apply -f service.yaml


      - name: Wait for rollout
        run: |
          kubectl -n weather rollout status deploy/remix-weather-app --timeout=180s

  deploy-prod:
    name: Deploy to AKS Prod (on push to main)
    if: github.event_name == 'push'
    needs: build-and-push
    runs-on: ubuntu-latest
    env:
      AKS_CLUSTER: ${{ vars.AKS_PROD_NAME }}
      AKS_RG: ${{ vars.RESOURCE_GROUP }}
      IMAGE: ${{ needs.build-and-push.outputs.image }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure OIDC Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: AKS set-context (prod)
        uses: azure/aks-set-context@v4
        with:
          resource-group: ${{ env.AKS_RG }}
          cluster-name: ${{ env.AKS_CLUSTER }}
          use-kubelogin: true

      - name: Ensure namespace
        run: |
          kubectl create namespace weather --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply Kubernetes manifests (prod)
        run: |
          sed "s|IMAGE_PLACEHOLDER|${IMAGE}|g" deployment.yaml | kubectl -n weather apply -f -
          kubectl -n weather apply -f service.yaml


      - name: Wait for rollout
        run: |
          kubectl -n weather rollout status deploy/remix-weather-app --timeout=180s